<?php

include_once('eatlas_map_client.constants.inc');

/**
 * Implements: hook_menu().
 * Module configuration
 */
function eatlas_map_client_menu() {
	$items = array();

	// NOTE: admin/config/eatlas is defined in "eatlas_commons"

	// Overview
	// List all Map Client blocks
	$items['admin/config/eatlas/eatlas_map_client'] = array(
		'title' => 'Map Client blocks',
		'description' => 'List all eAtlas Map Client blocks',
		'page callback' => '_eatlas_map_client_overview',

		'access callback' => '_eatlas_map_client_view_access',

		'file' => 'eatlas_map_client.admin.inc'
	);

	// Add a Map Client block
	$items['admin/config/eatlas/eatlas_map_client/add'] = array(
		// NOTE: The title doesn't show on the page. It's a known bug related to MENU_LOCAL_ACTION:
		//   https://www.drupal.org/node/891892
		'title' => 'Add a Map Client block',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('_eatlas_map_client_add_form'),

		'access callback' => '_eatlas_map_client_admin_access',

		'type' => MENU_LOCAL_ACTION,
		'file' => 'eatlas_map_client.admin.inc'
	);

	// Delete a Map Client block
	$items['admin/config/eatlas/eatlas_map_client/%/delete'] = array(
		'title callback' => '_eatlas_map_client_delete_title',
		'title arguments' => array(4),
		'description' => 'Delete Map Client block',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('_eatlas_map_client_form_confirm_delete', 4),

		'access callback' => '_eatlas_map_client_admin_access',
		'access arguments' => array(4),

		'file' => 'eatlas_map_client.admin.inc'
	);

	return $items;
}

/**
 * Implements hook_help().
 */
function eatlas_map_client_help($path, $arg) {
	$output = '';
	switch ($path) {
		case 'admin/config/eatlas/eatlas_map_client':
			$output = '<p>' . t('Map Clients are used to show a map. Each Map Client create a block that needs to be configure and associated to a URL.') . '</p>';
	}

	return $output;
}

/**
 * Access rights
 */

function _eatlas_map_client_view_access() {
	return TRUE; // TODO
}

function _eatlas_map_client_admin_access() {
	return TRUE; // TODO
}

function _eatlas_map_client_edit_access($mcid) {
	return TRUE; // TODO
}

/**************************************
 * Blocks
 **************************************/

/**
 * Implement hook_block_info
 *
 * @return array
 */
function eatlas_map_client_block_info() {
	$blocks = array();

	$map_client_array = eatlas_map_client_load_all();
	foreach ($map_client_array as $map_client) {
		$block_id = EATLAS_MAP_CLIENTS_BLOCK_PREFIX . $map_client->mcid;
		$block = block_load('eatlas_map_client', $block_id);

		$blocks[$block_id] = array(
			'info' => t('eAtlas Map Client - @title', array('@title' => ($block && property_exists($block, 'title')) ? $block->title : 'Untitled')),
			// Disable cache, to allow dynamic blocks
			//   https://api.drupal.org/api/drupal/includes%21common.inc/7.x
			'cache' => DRUPAL_NO_CACHE,
		);
	}

	return $blocks;
}

/**
 * Implement hook_block_configure
 * https://api.drupal.org/api/drupal/developer%21topics%21forms_api_reference.html/7.x
 * @param string $delta
 * @return array
 */
function eatlas_map_client_block_configure($delta = '') {
	$form = array();

	if (eatlas_commons_starts_with($delta, EATLAS_MAP_CLIENTS_BLOCK_PREFIX)) {
		$mcid = substr($delta, strlen(EATLAS_MAP_CLIENTS_BLOCK_PREFIX));
		$map_client = eatlas_map_client_load($mcid);
		_eatlas_map_client_add_form_fields($form, $map_client);
	}

	return $form;
}

/**
 * Form API:
 * 		https://api.drupal.org/api/drupal/developer%21topics%21forms_api_reference.html/7.x
 * @param $form
 * @param $map_client
 */
function _eatlas_map_client_add_form_fields(&$form, $map_client) {
	$form['map_config_host'] = array(
		'#type' => 'textfield',
		'#title' => t('Map configuration host'),
		'#description' => t('Host for getting the map configuration'),
		'#default_value' => property_exists($map_client, 'map_config_host') ? $map_client->map_config_host : 'maps.eatlas.org.au',
		'#required' => TRUE
	);

	$form['map_config_url'] = array(
		'#type' => 'textfield',
		'#title' => t('Map configuration URL'),
		'#description' => t('URL to JSON configuration'),
		'#default_value' => property_exists($map_client, 'map_config_url') ? $map_client->map_config_url : 'atlasmapper/client/gbrf/config/main.json',
		'#required' => TRUE
	);

	$form['show_button_open_map_url'] = array(
		'#type' => 'select',
		'#title' => t('Open map URL button'),
		'#description' => t('Show the button to open the map banner URL.'),
		'#default_value' => property_exists($map_client, 'show_button_open_map_url') ? $map_client->show_button_open_map_url : 1,
		'#options' => array(
			1 => 'Show',
			0 => 'Hide'
		)
	);

	$form['show_default_overlay_layers'] = array(
		'#type' => 'select',
		'#title' => t('Show default overlay layers'),
		'#description' => t('When a map is loaded, should the default overlay layers be displayed?'),
		'#default_value' => property_exists($map_client, 'show_default_overlay_layers') ? $map_client->show_default_overlay_layers : 1,
		'#options' => array(
			1 => 'Show',
			0 => 'Hide'
		)
	);

	$form['enable_select_layers'] = array(
		'#type' => 'select',
		'#title' => t('Select layers'),
		'#description' => t('Enable the select layers dialog.'),
		'#default_value' => property_exists($map_client, 'enable_select_layers') ? $map_client->enable_select_layers : 1,
		'#options' => array(
			1 => 'On',
			0 => 'Off'
		)
	);

	$form['enable_metadata'] = array(
		'#type' => 'select',
		'#title' => t('Show metadata'),
		'#description' => t('Enable the metadata feature.'),
		'#default_value' => property_exists($map_client, 'enable_metadata') ? $map_client->enable_metadata : 1,
		'#options' => array(
			1 => 'On',
			0 => 'Off'
		)
	);

	$form['enable_feature_requests'] = array(
		'#type' => 'select',
		'#title' => t('Feature requests'),
		'#description' => t('Enable feature requests.'),
		'#default_value' => property_exists($map_client, 'enable_feature_requests') ? $map_client->enable_feature_requests : 1,
		'#options' => array(
			1 => 'On',
			0 => 'Off'
		)
	);

	$form['feature_requests_results_position'] = array(
		'#type' => 'select',
		'#title' => t('Feature requests result position'),
		'#description' => t('Define where the results of the feature requests should be shown.'),
		'#default_value' => property_exists($map_client, 'feature_requests_results_position') ? $map_client->feature_requests_results_position : 1,
		'#options' => array(
			1 => 'Right',
			2 => 'Bottom',
			3 => 'Left',
			4 => 'Top',
		)
	);

	$form['default_active_component'] = array(
		'#type' => 'select',
		'#title' => t('Default active component'),
		'#description' => t('Define which component should be activated by default.'),
		'#default_value' => property_exists($map_client, 'default_active_component') ? $map_client->default_active_component : '',
		'#options' => array(
			'' => 'None',
			'legend' => 'Legend',
			'showLayers' => 'Select layers',
			'getFeatureInfo' => 'Get feature information',
      'metadata' => 'Metadata'
		)
	);

}

/**
 * Implement hook_block_save.
 *
 * Save the value set by the user. Fields defined in "hook_block_configure".
 * @param string $delta
 * @param array $edit
 * @throws Exception
 */
function eatlas_map_client_block_save($delta = '', $edit = array()) {
	if (eatlas_commons_starts_with($delta, EATLAS_MAP_CLIENTS_BLOCK_PREFIX)) {
		$mcid = substr($delta, strlen(EATLAS_MAP_CLIENTS_BLOCK_PREFIX));
		$map_client = _get_edited_map_client($mcid, $edit);
		eatlas_map_client_save($map_client);
	}
}

/**
 * Implement hook_block_view
 * @param string $delta
 * @return array
 */
function eatlas_map_client_block_view($delta = '') {
	$block = array();
	$node = menu_get_object();

	if (!$node) {
		return $block;
	}

	$field_map_banner = field_get_items('node', $node, 'field_map_banner');
	if (!is_array($field_map_banner) || count($field_map_banner) < 1) {
		return $block;
	}
	$field_map_banner_type = field_get_items('node', $node, 'field_map_banner_type');
	if (!is_array($field_map_banner_type) || count($field_map_banner_type) < 1) {
		return $block;
	}

	////////////////////////////////////////////////////////////////////////////
	/// MH, 2018-02-07, hack for displaying the GBRF page as an iframe
	/// ToDo remove code
	////////////////////////////////////////////////////////////////////////////
	if (strpos($field_map_banner[0]['value'], '/gbrf-rr/index.html') > 0) {
		$block['subject'] = NULL;
		$block['title'] = '<none>';

		$block['content'] = array(
			'#markup' => '<iframe class="eatlas-map-client-map ' . $field_map_banner_type[0]['value'] . '-map" style="display: block; border: 0; width: 100%;" src="' . $field_map_banner[0]['value'] . '" frameborder="0"></iframe>',
			'#attached' => array(
				'css' => array(drupal_get_path('module', 'eatlas_map_client') . '/css/eatlas_map_client.css')
			)
		);
		return $block;
	}

	try {
		$map_config = _parse_map_banner_url($field_map_banner[0]['value']);
	} catch (Exception $exception) {
		watchdog_exception('block', $exception);
		return $block;
	}

	if (eatlas_commons_starts_with($delta, EATLAS_MAP_CLIENTS_BLOCK_PREFIX)) {
		$mcid = substr($delta, strlen(EATLAS_MAP_CLIENTS_BLOCK_PREFIX));
		$map_client = eatlas_map_client_load($mcid);

		if ($map_client) {
			$map_config['projection'] = 'EPSG:4326';
			$map_config['configHost'] = $map_client->map_config_host;
			$map_config['configURL'] = $map_client->map_config_url;
			$map_config['showButtonOpenMapUrl'] = $map_client->show_button_open_map_url === '1';
			$map_config['disableDefaultOverlayLayer'] = $map_client->show_default_overlay_layers === '1' ? false : true;
			$map_config['disableShowLayers'] = $map_client->enable_select_layers === '1' ? false : true;
			$map_config['disableMetadata'] = $map_client->enable_metadata === '1' ? false : true;
			$map_config['disableFeatureRequests'] = $map_client->enable_feature_requests === '1' ? false : true;
			$map_config['defaultActiveComponent'] = $map_client->default_active_component;

			switch ($map_client->feature_requests_results_position) {
				case '4':
					$map_config['featureRequestsResultsPosition'] = 'top';
					break;
				case '3':
					$map_config['featureRequestsResultsPosition'] = 'left';
					break;
				case '2':
					$map_config['featureRequestsResultsPosition'] = 'bottom';
					break;
				case '1':
				default:
					$map_config['featureRequestsResultsPosition'] = 'right';
					break;
			}

			$query_parameters = drupal_get_query_parameters();
			if (isset($query_parameters['rsid']) && isset($query_parameters['featureId'])) {
				$region_set_node = node_load($query_parameters['rsid']);
				$map_config['bbox'] = eatlas_spatial_publisher_get_feature_bbox($region_set_node, $query_parameters['featureId']);
			}

			$json_map_config = htmlspecialchars(json_encode($map_config), ENT_QUOTES, 'UTF-8');

			// Hide the block title.
			// NOTE: The API suggest to use $block['subject'] but that doesn't work.
			//     https://api.drupal.org/api/drupal/modules%21block%21block.api.php/function/hook_block_view/7.x
			//   Someone suggested to use $block['title'] = '<none>', an undocummented feature that actually works.
			//     https://api.drupal.org/api/drupal/modules%21block%21block.api.php/function/hook_block_view/7.x#comment-55603
			$block['subject'] = NULL;
			$block['title'] = '<none>';

			// Define the rendering of the block
			// Add library to the block using "#attached"
			$map_div_id = 'map_' . check_plain($delta);
			$block['content'] = array(
				'#prefix' => '<div class="eatlas-map-client-map-wrapper">',
				'#markup' => '<div class="eatlas-map-client-map ' . $field_map_banner_type[0]['value'] . '-map" id="' . $map_div_id . '" data-map-config="' . $json_map_config . '" data-map-banner-url="' . $field_map_banner[0]['value'] . '"></div>',
				'#suffix' => '</div>',
				'#attached' => array(
					'js' => array(
						'sites/all/libraries/openlayers/ol.js',
						'sites/all/libraries/mapping-client/js/aims-map-withdeps.js',
						drupal_get_path('module', 'eatlas_map_client') . '/js/eatlas_map_client.js'
					),
					'css' => array(
						drupal_get_path('module', 'eatlas_map_client') . '/css/eatlas_map_client.css'
					)
				)
			);
		}
	}

	return $block;
}

/**
 * @param $map_banner_url
 * @return array
 */
function _parse_map_banner_url($map_banner_url) {
	$map_config = array();
	$query_string = parse_url($map_banner_url, PHP_URL_QUERY);

	$map_config['layers'] = array();
	$layer_visibilities = array();
	$layer_styles = array();
	$layer_opacity = array();
	foreach (explode('&', $query_string) as $parameter) {
		if (strpos($parameter, '=')) {
			list ($key, $val) = explode('=', $parameter);

			switch ($key) {
				case 'z':
					$map_config['zoom'] = $val;
					break;
				case 'll':
					$map_centre = explode(',', $val);
					$map_config['centre'] = array(
						'longitude' => floatval($map_centre[0]),
						'latitude' => floatval($map_centre[1])
					);
					break;
				case 'l0':
					$layers = explode(',', $val);
					foreach ($layers as $layer) {
						$map_config['layers'][] = array(
							'id' => urldecode($layer),
							'visible' => TRUE,
							'style' => ''
						);
					}
					break;
				case 'v0':
					$layer_visibilities = explode(',', $val);
					break;
				case 's0':
					$layer_styles = explode(',', $val);
					break;
				case 'o0':
					$layer_opacity = explode(',', $val);
					break;
				default:
					break;
			}
		}
	}

	// update layer visibilities
	foreach ($layer_visibilities as $key => $visibility) {
		if (isset($map_config['layers'][$key])) {
			// only consider visibility false because default is TRUE (see case 'l0' -> 'visibility' => TRUE)
			if ($visibility == 'f') {
				$map_config['layers'][$key]['visible'] = FALSE;
			}
		}
	}

	// update layer styles
	foreach ($layer_styles as $key => $style) {
		if (isset($map_config['layers'][$key])) {
			if ($style != '') {
				$map_config['layers'][$key]['style'] = $style;
			}
		}
	}

  // update layer opacity
  foreach ($layer_opacity as $key => $opacity) {
    if (isset($map_config['layers'][$key])) {
      if ($opacity != '') {
        $map_config['layers'][$key]['opacity'] = $opacity;
      }
    }
  }

	// finally reverse array to have the correct order for displaying layers on top of each other
	$map_config['layers'] = array_reverse($map_config['layers']);

	return $map_config;
}

/**
 * @param $mcid
 * @param array $values
 * @return null|stdClass
 */
function _get_edited_map_client($mcid, $values = array()) {
	$map_client = NULL;
	if ($mcid !== NULL) {
		$map_client = eatlas_map_client_load($mcid);
	}

	if ($map_client === NULL) {
		$map_client = new stdClass();
	}

	$map_client->map_config_host = $values['map_config_host'];
	$map_client->map_config_url = $values['map_config_url'];
	$map_client->show_button_open_map_url = $values['show_button_open_map_url'];
	$map_client->show_default_overlay_layers = $values['show_default_overlay_layers'];
	$map_client->enable_select_layers = $values['enable_select_layers'];
	$map_client->enable_metadata = $values['enable_metadata'];
	$map_client->enable_feature_requests = $values['enable_feature_requests'];
	$map_client->feature_requests_results_position = $values['feature_requests_results_position'];
	$map_client->default_active_component = $values['default_active_component'];

	return $map_client;
}


/**
 * Database functions
 */

/**
 * @return array
 */
function eatlas_map_client_load_all () {
	// DB Select using the Drupal objects
	//   https://api.drupal.org/api/drupal/includes!database!database.inc/function/db_select/7
	$query = db_select(EATLAS_MAP_CLIENTS_LIST_DB_TABLE, 'mc')
		->fields('mc');
	$result = $query->execute();

	$blocks = array();
	while($data = $result->fetchAssoc()) {
		$blocks[] = (object) $data;
	}

	return $blocks;
}

/**
 * Follow the convention of node_load.
 * $mcid: The Map Client ID.
 *   https://api.drupal.org/api/drupal/modules%21node%21node.module/function/node_load/7
 */
function eatlas_map_client_load($mcid) {
	if ($mcid === NULL) {
		return new stdClass();
	}

	// DB Select using the Drupal objects
	//   https://api.drupal.org/api/drupal/includes!database!database.inc/function/db_select/7
	$query = db_select(EATLAS_MAP_CLIENTS_LIST_DB_TABLE, 'mc')
		->fields('mc')
		->condition('mc.mcid', $mcid, '=');
	$result = $query->execute();

	$data = $result->fetchAssoc();

	if (!$data) {
		return new stdClass();
	}

	return (object) $data;
}

/**
 * Follow the convention of node_save.
 * $map_client_block: The Map Client block object to be saved.
 *   https://api.drupal.org/api/drupal/modules%21node%21node.module/function/node_save/7
 * @throws Exception
 */
function eatlas_map_client_save($map_client_block) {
	// Transform the object into an Array to be sent to the DB.
	$map_client_block_fields = (array) $map_client_block;

	$mcid = isset($map_client_block_fields['mcid']) ? $map_client_block_fields['mcid'] : NULL;

	if ($mcid === NULL) {
		// Insert
		//   https://api.drupal.org/api/drupal/includes%21database%21query.inc/function/InsertQuery%3A%3Aexecute/7
		$mcid = db_insert(EATLAS_MAP_CLIENTS_LIST_DB_TABLE)->fields($map_client_block_fields)->execute();
	} else {
		// Update

		// SPID is used in the "WHERE" clause, not in the values.
		unset($map_client_block_fields['mcid']);
		db_update(EATLAS_MAP_CLIENTS_LIST_DB_TABLE)->fields($map_client_block_fields)->condition('mcid', $mcid)->execute();
	}

	//watchdog("eatlas_map_client_save", "map_client_block: <pre>" . print_r($map_client_block, TRUE) . "</pre>");
	return $mcid;
}

/**
 * Event listener callback function
 * @param $mcid
 */
function eatlas_map_client_delete($mcid) {
	db_delete(EATLAS_MAP_CLIENTS_LIST_DB_TABLE)->condition('mcid', $mcid)->execute();
}
