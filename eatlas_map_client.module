<?php

include_once('eatlas_map_client.constants.inc');

/**
 * Implements: hook_menu().
 * Module configuration
 */
function eatlas_map_client_menu() {
	$items = array();

	// Overview
	// List all Map Client blocks
	$items['admin/config/eatlas/eatlas_map_client'] = array(
		'title' => 'Map Client configurations',
		'description' => 'List all eAtlas Map Client definitions and blocks',
		'page callback' => '_eatlas_map_client_overview',
		'access callback' => '_eatlas_map_client_view_access',
		'file' => 'eatlas_map_client.admin.inc'
	);

  // Add a Map Client definition
  $items['admin/config/eatlas/eatlas_map_client/definition/add'] = array(
    'title' => 'Add a Map Client definition',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_eatlas_map_client_edit_definition_form'),
    'access callback' => '_eatlas_map_client_admin_access',
    'type' => MENU_LOCAL_ACTION,
    'file' => 'eatlas_map_client.admin.inc',
    'weight' => 1
  );

  // Edit a Map Client definition
  $items['admin/config/eatlas/eatlas_map_client/definition/%/edit'] = array(
    'title' => 'Edit a Map Client definition',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_eatlas_map_client_edit_definition_form', 5),
    'access callback' => '_eatlas_map_client_admin_access',
    'file' => 'eatlas_map_client.admin.inc'
  );

  // Delete a Map Client definition
  $items['admin/config/eatlas/eatlas_map_client/definition/%/delete'] = array(
    'title' => 'Delete a Map Client definition',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_eatlas_map_client_form_confirm_delete_definition', 5),
    'access callback' => '_eatlas_map_client_admin_access',
    'file' => 'eatlas_map_client.admin.inc'
  );

	// Add a Map Client block
	$items['admin/config/eatlas/eatlas_map_client/block/add'] = array(
		'title' => 'Add a Map Client block',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('_eatlas_map_client_add_block_form'),
		'access callback' => '_eatlas_map_client_admin_access',
		'type' => MENU_LOCAL_ACTION,
		'file' => 'eatlas_map_client.admin.inc',
    'weight' => 2
	);

	// Delete a Map Client block
	$items['admin/config/eatlas/eatlas_map_client/block/%/delete'] = array(
		'title callback' => '_eatlas_map_client_delete_block_title',
		'title arguments' => array(5),
		'description' => 'Delete Map Client block',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('_eatlas_map_client_form_confirm_delete_block', 5),
		'access callback' => '_eatlas_map_client_admin_access',
		'file' => 'eatlas_map_client.admin.inc'
	);

	return $items;
}

/**
 * Implements hook_help().
 */
function eatlas_map_client_help($path, $arg) {
	$output = '';
	switch ($path) {
		case 'admin/config/eatlas/eatlas_map_client':
			$output = '<p>' . t('Map Clients are used to show a map. Each Map Client create a block that needs to be configure and associated to a URL.') . '</p>';
	}

	return $output;
}

/**
 * Access rights
 */

function _eatlas_map_client_view_access() {
	return TRUE; // TODO
}

function _eatlas_map_client_admin_access() {
	return TRUE; // TODO
}

function _eatlas_map_client_edit_access($mcbid) {
	return TRUE; // TODO
}

/**************************************
 * Blocks
 **************************************/

/**
 * Implement hook_block_info
 *
 * @return array
 */
function eatlas_map_client_block_info() {
	$blocks = array();

	$map_client_block_array = eatlas_map_client_block_config_load_all();
	foreach ($map_client_block_array as $map_client_block) {
		$block_id = EATLAS_MAP_CLIENT_BLOCK_PREFIX . $map_client_block->mcbid;
		$block = block_load('eatlas_map_client', $block_id);

		$blocks[$block_id] = array(
			'info' => t('eAtlas Map Client - @title', array('@title' => ($block && property_exists($block, 'title')) ? $block->title : 'Untitled')),
			// Disable cache, to allow dynamic blocks
			//   https://api.drupal.org/api/drupal/includes%21common.inc/7.x
			'cache' => DRUPAL_NO_CACHE,
		);
	}

	return $blocks;
}

/**
 * Implement hook_block_configure
 * https://api.drupal.org/api/drupal/developer%21topics%21forms_api_reference.html/7.x
 * @param string $delta
 * @return array
 */
function eatlas_map_client_block_configure($delta = '') {
	$form = array();

	if (eatlas_commons_starts_with($delta, EATLAS_MAP_CLIENT_BLOCK_PREFIX)) {
		$mcbid = substr($delta, strlen(EATLAS_MAP_CLIENT_BLOCK_PREFIX));
		$map_client_block_config = eatlas_map_client_block_config_load($mcbid);
		_eatlas_map_client_add_block_form_fields($form, $map_client_block_config);
	}

	return $form;
}

/**
 * Form API:
 * 		https://api.drupal.org/api/drupal/developer%21topics%21forms_api_reference.html/7.x
 * @param $form
 * @param $map_client_definition
 */
function _eatlas_map_client_edit_definition_form_fields(&$form, $map_client_definition) {
	$form['map_config_host'] = array(
		'#type' => 'textfield',
		'#title' => t('Map configuration host'),
		'#description' => t('Host for getting the map configuration, e.g. "maps.eatlas.org.au"'),
		'#default_value' => property_exists($map_client_definition, 'map_config_host') ? $map_client_definition->map_config_host : '',
		'#required' => TRUE
	);

	$form['map_config_url'] = array(
		'#type' => 'textfield',
		'#title' => t('Map configuration URL'),
		'#description' => t('URL to JSON configuration, e.g. "atlasmapper/client/gbrf/config/main.json"'),
		'#default_value' => property_exists($map_client_definition, 'map_config_url') ? $map_client_definition->map_config_url : '',
		'#required' => TRUE
	);

	$form['show_default_overlay_layers'] = array(
		'#type' => 'select',
		'#title' => t('Show default overlay layers'),
		'#description' => t('When a map is loaded, should the default overlay layers be displayed?'),
		'#default_value' => property_exists($map_client_definition, 'show_default_overlay_layers') ? $map_client_definition->show_default_overlay_layers : 1,
		'#options' => array(
			1 => 'Show',
			0 => 'Hide'
		)
	);
}

/**
 * Form API:
 * 		https://api.drupal.org/api/drupal/developer%21topics%21forms_api_reference.html/7.x
 * @param $form
 * @param $map_client_block
 */
function _eatlas_map_client_add_block_form_fields(&$form, $map_client_block) {
  $map_client_definitions = eatlas_map_client_definition_config_load_all();
  $map_client_definitions_options = array();
  foreach ($map_client_definitions as $map_client_definition) {
    $map_client_definitions_options[$map_client_definition->mcdid] = $map_client_definition->map_config_host;
  }

  $form['default_mcdid'] = array(
    '#type' => 'select',
    '#title' => t('Default map client definition'),
    '#description' => t('Select the map client definition which should be used as a default for this block.'),
    '#default_value' => property_exists($map_client_block, 'default_mcdid') ? $map_client_block->default_mcdid : NULL,
    '#options' => $map_client_definitions_options
  );

	$form['show_button_open_map_url'] = array(
		'#type' => 'select',
		'#title' => t('Open map URL button'),
		'#description' => t('Show the button to open the map banner URL.'),
		'#default_value' => property_exists($map_client_block, 'show_button_open_map_url') ? $map_client_block->show_button_open_map_url : 1,
		'#options' => array(
			1 => 'Show',
			0 => 'Hide'
		)
	);

	$form['enable_select_layers'] = array(
		'#type' => 'select',
		'#title' => t('Select layers'),
		'#description' => t('Enable the select layers dialog.'),
		'#default_value' => property_exists($map_client_block, 'enable_select_layers') ? $map_client_block->enable_select_layers : 1,
		'#options' => array(
			1 => 'On',
			0 => 'Off'
		)
	);

	$form['enable_metadata'] = array(
		'#type' => 'select',
		'#title' => t('Show metadata'),
		'#description' => t('Enable the metadata feature.'),
		'#default_value' => property_exists($map_client_block, 'enable_metadata') ? $map_client_block->enable_metadata : 1,
		'#options' => array(
			1 => 'On',
			0 => 'Off'
		)
	);

	$form['enable_feature_requests'] = array(
		'#type' => 'select',
		'#title' => t('Feature requests'),
		'#description' => t('Enable feature requests.'),
		'#default_value' => property_exists($map_client_block, 'enable_feature_requests') ? $map_client_block->enable_feature_requests : 1,
		'#options' => array(
			1 => 'On',
			0 => 'Off'
		)
	);

	$form['feature_requests_results_position'] = array(
		'#type' => 'select',
		'#title' => t('Feature requests result position'),
		'#description' => t('Define where the results of the feature requests should be shown.'),
		'#default_value' => property_exists($map_client_block, 'feature_requests_results_position') ? $map_client_block->feature_requests_results_position : 1,
		'#options' => array(
			1 => 'Right',
			2 => 'Bottom',
			3 => 'Left',
			4 => 'Top',
		)
	);

	$form['default_active_component'] = array(
		'#type' => 'select',
		'#title' => t('Default active component'),
		'#description' => t('Define which component should be activated by default.'),
		'#default_value' => property_exists($map_client_block, 'default_active_component') ? $map_client_block->default_active_component : '',
		'#options' => array(
			'' => 'None',
			'legend' => 'Legend',
			'showLayers' => 'Select layers',
			'getFeatureInfo' => 'Get feature information',
      'metadata' => 'Metadata'
		)
	);
}

/**
 * Implement hook_block_save.
 *
 * Save the value set by the user. Fields defined in "hook_block_configure".
 * @param string $delta
 * @param array $edit
 */
function eatlas_map_client_block_save($delta = '', $edit = array()) {
	if (eatlas_commons_starts_with($delta, EATLAS_MAP_CLIENT_BLOCK_PREFIX)) {
		$mcbid = substr($delta, strlen(EATLAS_MAP_CLIENT_BLOCK_PREFIX));
		$map_client_block = _get_edited_map_client_block($mcbid, $edit);
		eatlas_map_client_block_save($map_client_block);
	}
}

/**
 * Implement hook_block_view
 * @param string $delta
 * @return array
 */
function eatlas_map_client_block_view($delta = '') {
  $block = array();
	$node = menu_get_object();

	if (!$node) {
		return $block;
	}

	$field_map_banner = field_get_items('node', $node, 'field_map_banner');
  if (!is_array($field_map_banner) || count($field_map_banner) < 1) {
		return $block;
	}
	$field_map_banner_type = field_get_items('node', $node, 'field_map_banner_type');
	if (!is_array($field_map_banner_type) || count($field_map_banner_type) < 1) {
		return $block;
	}

  $field_map_banner_configuration = field_get_items('node', $node, 'field_map_banner_configuration');
  if (!is_array($field_map_banner_configuration) || count($field_map_banner_configuration) < 1) {
    // set to null so that the default definition will be used
    $field_map_banner_configuration = array(array('tid' => null));
  }

  ////////////////////////////////////////////////////////////////////////////
	/// MH, 2018-02-07, hack for displaying the GBRF page as an iframe
	/// ToDo remove code
	////////////////////////////////////////////////////////////////////////////
	if (strpos($field_map_banner[0]['value'], '/gbrf-rr/index.html') > 0) {
		$block['subject'] = NULL;
		$block['title'] = '<none>';

		$block['content'] = array(
			'#markup' => '<iframe class="eatlas-map-client-map ' . $field_map_banner_type[0]['value'] . '-map" style="display: block; border: 0; width: 100%;" src="' . $field_map_banner[0]['value'] . '" frameborder="0"></iframe>',
			'#attached' => array(
				'css' => array(drupal_get_path('module', 'eatlas_map_client') . '/css/eatlas_map_client.css')
			)
		);
		return $block;
	}

	try {
		$map_config = _parse_map_banner_url($field_map_banner[0]['value']);
	} catch (Exception $exception) {
		watchdog_exception('block', $exception);
		return $block;
	}

	if (eatlas_commons_starts_with($delta, EATLAS_MAP_CLIENT_BLOCK_PREFIX)) {
		$mcbid = substr($delta, strlen(EATLAS_MAP_CLIENT_BLOCK_PREFIX));
		$map_client_block = eatlas_map_client_block_config_load($mcbid);
    $map_client_definition = null;
		if (!$field_map_banner_configuration[0]['tid']) {
      $map_client_definition = eatlas_map_client_definition_config_load($map_client_block->default_mcdid);
    } else {
      $map_client_definition = eatlas_map_client_definition_config_load_by_tid($field_map_banner_configuration[0]['tid']);
    }

		if ($map_client_block) {
			$map_config['projection'] = 'EPSG:4326';
			$map_config['configHost'] = $map_client_definition->map_config_host;
			$map_config['configURL'] = $map_client_definition->map_config_url;
      $map_config['disableDefaultOverlayLayer'] = $map_client_definition->show_default_overlay_layers === '1' ? false : true;

      $map_config['showButtonOpenMapUrl'] = $map_client_block->show_button_open_map_url === '1';
			$map_config['disableShowLayers'] = $map_client_block->enable_select_layers === '1' ? false : true;
			$map_config['disableMetadata'] = $map_client_block->enable_metadata === '1' ? false : true;
			$map_config['disableFeatureRequests'] = $map_client_block->enable_feature_requests === '1' ? false : true;
			$map_config['defaultActiveComponent'] = $map_client_block->default_active_component;

			switch ($map_client_block->feature_requests_results_position) {
				case '4':
					$map_config['featureRequestsResultsPosition'] = 'top';
					break;
				case '3':
					$map_config['featureRequestsResultsPosition'] = 'left';
					break;
				case '2':
					$map_config['featureRequestsResultsPosition'] = 'bottom';
					break;
				case '1':
				default:
					$map_config['featureRequestsResultsPosition'] = 'right';
					break;
			}

			$query_parameters = drupal_get_query_parameters();
			if (isset($query_parameters['rsid']) && isset($query_parameters['featureId'])) {
				$region_set_node = node_load($query_parameters['rsid']);
				$map_config['bbox'] = eatlas_spatial_publisher_get_feature_bbox($region_set_node, $query_parameters['featureId']);
			}

			$json_map_config = htmlspecialchars(json_encode($map_config), ENT_QUOTES, 'UTF-8');

			// Hide the block title.
			// NOTE: The API suggest to use $block['subject'] but that doesn't work.
			//     https://api.drupal.org/api/drupal/modules%21block%21block.api.php/function/hook_block_view/7.x
			//   Someone suggested to use $block['title'] = '<none>', an undocummented feature that actually works.
			//     https://api.drupal.org/api/drupal/modules%21block%21block.api.php/function/hook_block_view/7.x#comment-55603
			$block['subject'] = NULL;
			$block['title'] = '<none>';

			// Define the rendering of the block
			// Add library to the block using "#attached"
			$map_div_id = 'map_' . check_plain($delta);
			$block['content'] = array(
				'#prefix' => '<div class="eatlas-map-client-map-wrapper">',
				'#markup' => '<div class="eatlas-map-client-map ' . $field_map_banner_type[0]['value'] . '-map" id="' . $map_div_id . '" data-map-config="' . $json_map_config . '" data-map-banner-url="' . $field_map_banner[0]['value'] . '"></div>',
				'#suffix' => '</div>',
				'#attached' => array(
					'js' => array(
						'sites/all/libraries/openlayers/ol.js',
						'sites/all/libraries/mapping-client/js/aims-map-withdeps.js',
						drupal_get_path('module', 'eatlas_map_client') . '/js/eatlas_map_client.js'
					),
					'css' => array(
						drupal_get_path('module', 'eatlas_map_client') . '/css/eatlas_map_client.css'
					)
				)
			);
		}
	}

	return $block;
}

/**
 * @param $map_banner_url
 * @return array
 */
function _parse_map_banner_url($map_banner_url) {
	$map_config = array();
	$query_string = parse_url($map_banner_url, PHP_URL_QUERY);

	$map_config['layers'] = array();
	$layer_visibilities = array();
	$layer_styles = array();
	$layer_opacity = array();
	foreach (explode('&', $query_string) as $parameter) {
		if (strpos($parameter, '=')) {
			list ($key, $val) = explode('=', $parameter);

			switch ($key) {
				case 'z':
					$map_config['zoom'] = $val;
					break;
				case 'll':
					$map_centre = explode(',', $val);
					$map_config['centre'] = array(
						'longitude' => floatval($map_centre[0]),
						'latitude' => floatval($map_centre[1])
					);
					break;
				case 'l0':
					$layers = explode(',', $val);
					foreach ($layers as $layer) {
						$map_config['layers'][] = array(
							'id' => urldecode($layer),
							'visible' => TRUE,
							'style' => ''
						);
					}
					break;
				case 'v0':
					$layer_visibilities = explode(',', $val);
					break;
				case 's0':
					$layer_styles = explode(',', $val);
					break;
				case 'o0':
					$layer_opacity = explode(',', $val);
					break;
				default:
					break;
			}
		}
	}

	// update layer visibilities
	foreach ($layer_visibilities as $key => $visibility) {
		if (isset($map_config['layers'][$key])) {
			// only consider visibility false because default is TRUE (see case 'l0' -> 'visibility' => TRUE)
			if ($visibility == 'f') {
				$map_config['layers'][$key]['visible'] = FALSE;
			}
		}
	}

	// update layer styles
	foreach ($layer_styles as $key => $style) {
		if (isset($map_config['layers'][$key])) {
			if ($style != '') {
				$map_config['layers'][$key]['style'] = $style;
			}
		}
	}

  // update layer opacity
  foreach ($layer_opacity as $key => $opacity) {
    if (isset($map_config['layers'][$key])) {
      if ($opacity != '') {
        $map_config['layers'][$key]['opacity'] = $opacity;
      }
    }
  }

	// finally reverse array to have the correct order for displaying layers on top of each other
	$map_config['layers'] = array_reverse($map_config['layers']);

	return $map_config;
}

/**
 * @param $mcbid
 * @param array $values
 * @return null|stdClass
 */
function _get_edited_map_client_block($mcbid, $values = array()) {
	$map_client_block = NULL;
	if ($mcbid !== NULL) {
		$map_client_block = eatlas_map_client_block_config_load($mcbid);
	}

	if ($map_client_block === NULL) {
		$map_client_block = new stdClass();
	}

  $map_client_block->show_button_open_map_url = $values['show_button_open_map_url'];
	$map_client_block->enable_select_layers = $values['enable_select_layers'];
	$map_client_block->enable_metadata = $values['enable_metadata'];
	$map_client_block->enable_feature_requests = $values['enable_feature_requests'];
	$map_client_block->feature_requests_results_position = $values['feature_requests_results_position'];
	$map_client_block->default_active_component = $values['default_active_component'];

	return $map_client_block;
}
/**
 * @param $mcdid
 * @param array $values
 * @return null|stdClass
 */
function _get_edited_map_client_definition($mcdid, $values = array()) {
	$map_client_definition = NULL;
	if ($mcdid !== NULL) {
		$map_client_definition = eatlas_map_client_definition_config_load($mcdid);
	}

	if ($map_client_definition === NULL) {
		$map_client_definition = new stdClass();
	} else {
    $map_client_definition->mcdid = $mcdid;
  }

	$map_client_definition->map_config_host = $values['map_config_host'];
	$map_client_definition->map_config_url = $values['map_config_url'];
  $map_client_definition->show_default_overlay_layers = $values['show_default_overlay_layers'];

  return $map_client_definition;
}


/**
 * Database functions
 */

/**
 * Load all mab client definitions
 * @return array
 */
function eatlas_map_client_definition_config_load_all() {
  $query = db_select(EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE, 'mcd')
    ->fields('mcd');
  $result = $query->execute();

  $definitions = array();
  while ($data = $result->fetchAssoc()) {
    $definitions[] = (object)$data;
  }
  return $definitions;
}

/**
 * Load a single map client definition
 * @param $mcdid : The Map Client definition ID.
 * @return object|stdClass
 */
function eatlas_map_client_definition_config_load($mcdid) {
  if ($mcdid === NULL) {
    return new stdClass();
  }

  $query = db_select(EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE, 'mcd')
    ->fields('mcd')
    ->condition('mcd.mcdid', $mcdid, '=');
  $result = $query->execute();

  $data = $result->fetchAssoc();
  if (!$data) {
    return new stdClass();
  }

  return (object)$data;
}

/**
 * Load a single map client definition by taxonomy term ID
 * @param $tid : The taxonomy term ID.
 * @return object|stdClass
 */
function eatlas_map_client_definition_config_load_by_tid($tid) {
  if ($tid === NULL) {
    return new stdClass();
  }

  $query = db_select(EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE, 'mcd')
    ->fields('mcd')
    ->condition('mcd.tid', $tid, '=');
  $result = $query->execute();

  $data = $result->fetchAssoc();
  if (!$data) {
    return new stdClass();
  }

  return (object)$data;
}

/**
 * Save a map client definition
 * @param $map_client_definition : The Map Client definition object to be saved.
 * @return DatabaseStatementInterface|int|mixed|null
 */
function eatlas_map_client_definition_config_save($map_client_definition) {
  // Transform the object into an Array to be sent to the DB.
  $map_client_definition_fields = (array) $map_client_definition;

  $mcdid = isset($map_client_definition_fields['mcdid']) ? $map_client_definition_fields['mcdid'] : NULL;
  if ($mcdid === NULL) {
    // Insert map client definition
    $mcdid = db_insert(EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE)->fields($map_client_definition_fields)->execute();

    // Add new taxonomy term for map client definition
    $vocab = taxonomy_vocabulary_machine_name_load(EATLAS_MAP_CLIENT_DEFINITIONS_VOCAB);
    $term = (object)array(
      'name' => $map_client_definition->map_config_host,
      'description' => "mcdid: " . $mcdid,
      'vid' => $vocab->vid,
    );
    taxonomy_term_save($term);
    // Add taxonomy term ID to map client definition
    db_update(EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE)
      ->fields(array('tid' => $term->tid))
      ->condition('mcdid', $mcdid)
      ->execute();

  } else {

    $term = taxonomy_term_load($map_client_definition->tid);
    $term->name = $map_client_definition->map_config_host;
    taxonomy_term_save($term);

    // Update map client definition
    // mcdid is used in the "WHERE" clause, not in the values.
    unset($map_client_definition_fields['mcdid']);
    db_update(EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE)
      ->fields($map_client_definition_fields)
      ->condition('mcdid', $mcdid)
      ->execute();
  }

  return $mcdid;
}

/**
 * Event listener callback function for map client definition delete
 * @param $mcdid : The map client definition ID
 */
function eatlas_map_client_definition_config_delete($mcdid) {
  // load map client definition to have the TID assiociated with it
  $map_client_definition = eatlas_map_client_definition_config_load($mcdid);

  // delete map client definition
  db_delete(EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE)->condition('mcdid', $mcdid)->execute();

  // delete taxonomy term
  taxonomy_term_delete($map_client_definition->tid);
}

/**
 * Load all mab client blocks
 * @return array
 */
function eatlas_map_client_block_config_load_all () {
	$query = db_select(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'mcb')
		->fields('mcb');
	$result = $query->execute();

	$blocks = array();
	while($data = $result->fetchAssoc()) {
		$blocks[] = (object) $data;
	}

	return $blocks;
}

/**
 * Load a single map client block
 * @param $mcbid : The Map Client block ID.
 * @return object|stdClass
 */
function eatlas_map_client_block_config_load($mcbid) {
	if ($mcbid === NULL) {
		return new stdClass();
	}

	$query = db_select(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'mcb')
		->fields('mcb')
		->condition('mcb.mcbid', $mcbid, '=');
	$result = $query->execute();

	$data = $result->fetchAssoc();

	if (!$data) {
		return new stdClass();
	}

	return (object) $data;
}

/**
 * Save a map client block
 * @param $map_client_block : The Map Client block object to be saved.
 * @return DatabaseStatementInterface|int|mixed|null
 */
function eatlas_map_client_block_config_save($map_client_block) {
	// Transform the object into an Array to be sent to the DB.
	$map_client_block_fields = (array) $map_client_block;

	$mcbid = isset($map_client_block_fields['mcbid']) ? $map_client_block_fields['mcbid'] : NULL;

	if ($mcbid === NULL) {
		// Insert
		$mcbid = db_insert(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE)->fields($map_client_block_fields)->execute();
	} else {
		// Update

		// mcbid is used in the "WHERE" clause, not in the values.
		unset($map_client_block_fields['mcbid']);
		db_update(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE)
      ->fields($map_client_block_fields)
      ->condition('mcbid', $mcbid)
      ->execute();
	}

	return $mcbid;
}

/**
 * Event listener callback function for map client block delete
 * @param $mcbid : The map client block ID
 */
function eatlas_map_client_block_config_delete($mcbid) {
	db_delete(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE)->condition('mcbid', $mcbid)->execute();
}
