<?php

include_once('eatlas_map_client.constants.inc');

/**
 * @return mixed
 */
function eatlas_map_client_schema() {
  $schema[EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE] = array(
    'description' => 'The eAtlas Map Client configuration table.',
    'fields' => array(
      'mcdid' => array(
        'description' => 'The primary identifier for a Map Client definition (sequential).',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'map_config_host' => array(
        'description' => 'Host for getting the map configuration.',
        'type' => 'text',
        'size' => 'small'
      ),
      'map_config_url' => array(
        'description' => 'Map configuration URL.',
        'type' => 'text',
        'size' => 'small'
      ),
      'show_default_overlay_layers' => array(
        'description' => 'Show default overlay layers (if exists).',
        'type' => 'int',
        'size' => 'tiny'
      ),
      'tid' => array(
        'description' => 'Taxonomy ID.',
        'type' => 'int',
        'unsigned' => TRUE
      )
    ),
    'primary key' => array('mcdid')
  );

  $schema[EATLAS_MAP_CLIENT_BLOCK_DB_TABLE] = array(
		'description' => 'The eAtlas Map Client configuration table.',
		'fields' => array(
			'mcbid' => array(
				'description' => 'The primary identifier for a Map Client block (sequential).',
				'type' => 'serial',
				'unsigned' => TRUE,
				'not null' => TRUE
			),
			'default_mcdid' => array(
				'description' => 'Default definition to use with this block',
				'type' => 'int'
			),
			'show_button_open_map_url' => array(
				'description' => 'Show the button to open the map banner URL.',
				'type' => 'int',
				'size' => 'tiny'
			),
			'enable_select_layers' => array(
				'description' => 'Enable feature for selecting layers.',
				'type' => 'int',
				'size' => 'tiny'
			),
			'enable_metadata' => array(
				'description' => 'Enable feature for showing metadata.',
				'type' => 'int',
				'size' => 'tiny'
			),
			'enable_feature_requests' => array(
				'description' => 'Enable feature requests.',
				'type' => 'int',
				'size' => 'tiny'
			),
			'feature_requests_results_position' => array(
				'description' => 'Define where the results of the feature requests should be shown. Values: right => 1, bottom => 2, left => 3, top => 4',
				'type' => 'int',
				'size' => 'tiny'
			),
			'default_active_component' => array(
				'description' => 'Define which component should be activated by default',
				'type' => 'text',
				'size' => 'small'
			)
		),
		'primary key' => array('mcbid')
	);

	return $schema;
}

/**
 * Implements hook_install().
 */
function eatlas_map_client_install() {
  $map_client_definitions_vocab = (object)array(
    'name' => 'Map Client definitions',
    'description' => 'This vocabulary is used to reference the map client definitions in articles.',
    'machine_name' => EATLAS_MAP_CLIENT_DEFINITIONS_VOCAB,
  );
  taxonomy_vocabulary_save($map_client_definitions_vocab);
}

/**
 * Implements hook_uninstall().
 */
function eatlas_map_client_uninstall() {
  $vocab = taxonomy_vocabulary_machine_name_load(EATLAS_MAP_CLIENT_DEFINITIONS_VOCAB);
  taxonomy_vocabulary_delete($vocab->vid);
}

/**
 * Updates
 * Implements: hook_update_N
 *   https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_update_N/7
 *
 * N = 7X00
 *   7 = Drupal core 7.
 *   X = Module major version.
 *   00 = Sequential number, for all the updates on that major version.
 *
 * Comments for each updates functions are used by Drupal as update notes.
 * $sandbox is used with long updates (to manage the progress bar)
 *
 * Developper note:
 *   To rerun an update, set the Update status back to the previous update (or 0 to rerun all updates)
 *   UPDATE system SET schema_version=0 WHERE name='eatlas_spatial_publisher';
 *     See: http://drupal.stackexchange.com/questions/42204/reseting-the-hook-update-n-status-of-a-module#42207
 */

/**
 * Add show-feature-request field. (7.x-0.4)
 */
function eatlas_map_client_update_7001(&$sandbox) {
	if (!db_field_exists(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'enable_feature_requests')) {
		$schema = drupal_get_schema(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE);
		db_add_field(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'enable_feature_requests', $schema['fields']['enable_feature_requests']);
	}
}

/**
 * Add feature_requests_results_position field. (7.x-0.4)
 */
function eatlas_map_client_update_7002(&$sandbox) {
	if (!db_field_exists(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'feature_requests_results_position')) {
		$schema = drupal_get_schema(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE);
		db_add_field(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'feature_requests_results_position', $schema['fields']['feature_requests_results_position']);
	}
}

/**
 * Rename field show_button_select_layers to enable_select_layers. (7.x-0.4)
 */
function eatlas_map_client_update_7003(&$sandbox) {
	if (db_field_exists(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'show_button_select_layers')) {
		$schema = drupal_get_schema(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE);
		db_change_field(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'show_button_select_layers', 'enable_select_layers', $schema['fields']['enable_select_layers']);
	}
}

/**
 * Rename field show_button_feature_requests to enable_feature_requests. (7.x-0.4)
 */
function eatlas_map_client_update_7004(&$sandbox) {
	if (db_field_exists(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'show_button_feature_requests')) {
		$schema = drupal_get_schema(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE);
		db_change_field(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'show_button_feature_requests', 'enable_feature_requests', $schema['fields']['enable_feature_requests']);
	}
}

/**
 * Add default_active_component field. (7.x-0.4)
 */
function eatlas_map_client_update_7005(&$sandbox) {
	if (!db_field_exists(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'default_active_component')) {
		$schema = drupal_get_schema(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE);
		db_add_field(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'default_active_component', $schema['fields']['default_active_component']);
	}
}

/**
 * Add enable_metadata field. (7.x-0.4)
 */
function eatlas_map_client_update_7006(&$sandbox) {
	if (!db_field_exists(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'enable_metadata')) {
		$schema = drupal_get_schema(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE);
		db_add_field(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'enable_metadata', $schema['fields']['enable_metadata']);
	}
}

/**
 * Add show_default_overlay_layer field. (7.x-1.6)
 */
function eatlas_map_client_update_7007(&$sandbox) {
	if (!db_field_exists(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'show_default_overlay_layers')) {
		$schema = drupal_get_schema(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE);
		db_add_field(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, 'show_default_overlay_layers', $schema['fields']['show_default_overlay_layers']);
	}
}

/**
 * Split module table into block and definition. (7.x-2.0)
 */
function eatlas_map_client_update_7008(&$sandbox) {
  // 'eatlas_map_client' previously combined definition and block table
  $prevTableName = 'eatlas_map_client';

  if (db_table_exists($prevTableName) && !db_table_exists(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE) &&
      !db_table_exists(EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE)) {

    // create definition table
    $schemas = eatlas_map_client_schema();
    $definitionTableSchema = $schemas[EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE];
    db_create_table(EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE, $definitionTableSchema);

    // create block table
    $blockTableSchema = $schemas[EATLAS_MAP_CLIENT_BLOCK_DB_TABLE];
    db_create_table(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE, $blockTableSchema);

    $data = db_select($prevTableName, 'eat')
      ->fields('eat')
      ->execute()
      ->fetchAllAssoc("mcid");
    foreach ($data as $row) {
      $mcdid = db_insert(EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE)
        ->fields(array(
          'mcdid' => $row->mcid,
          'map_config_host' => $row->map_config_host,
          'map_config_url' => $row->map_config_url,
          'show_default_overlay_layers' => $row->show_default_overlay_layers
        ))
        ->execute();
      db_insert(EATLAS_MAP_CLIENT_BLOCK_DB_TABLE)
        ->fields(array(
          'mcbid' => $row->mcid,
          'default_mcdid' => $mcdid,
          'show_button_open_map_url' => $row->show_button_open_map_url,
          'enable_select_layers' => $row->enable_select_layers,
          'enable_metadata' => $row->enable_metadata,
          'enable_feature_requests' => $row->enable_feature_requests,
          'feature_requests_results_position' => $row->feature_requests_results_position,
          'default_active_component' => $row->default_active_component
        ))
        ->execute();
    }

    db_delete($prevTableName);
  }
}

/**
 * Create vocab and insert terms if not exists. (7.x-2.1)
 */
function eatlas_map_client_update_7009(&$sandbox) {
  if (!db_field_exists(EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE, 'tid')) {
    $schema = drupal_get_schema(EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE);
    db_add_field(EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE, 'tid', $schema['fields']['tid']);
  }

  $vocab = taxonomy_vocabulary_machine_name_load(EATLAS_MAP_CLIENT_DEFINITIONS_VOCAB);
  if (!$vocab) {
    $map_client_definitions_vocab = (object)array(
      'name' => 'Map Client definitions',
      'description' => 'This vocabulary is used to reference the map client definitions in articles.',
      'machine_name' => EATLAS_MAP_CLIENT_DEFINITIONS_VOCAB,
    );
    taxonomy_vocabulary_save($map_client_definitions_vocab);

    $vocab = taxonomy_vocabulary_machine_name_load(EATLAS_MAP_CLIENT_DEFINITIONS_VOCAB);
    $map_client_definitions = eatlas_map_client_definition_config_load_all();
    foreach ($map_client_definitions as $map_client_definition)  {
      $term = (object)array(
        'name' => $map_client_definition->map_config_host,
        'description' => "mcdid: " . $map_client_definition->mcdid,
        'vid' => $vocab->vid,
      );
      taxonomy_term_save($term);

      $map_client_definition->tid = $term->tid;
      $map_client_definition_fields = (array)$map_client_definition;
      $mcdid = $map_client_definition_fields['mcdid'];
      unset($map_client_definition_fields['mcdid']);
      db_update(EATLAS_MAP_CLIENT_DEFINITIONS_DB_TABLE)
        ->fields($map_client_definition_fields)
        ->condition('mcdid', $mcdid)
        ->execute();
    }
  }
}
